from tkinter import *
janela1 = Tk()
from tkinter import ttk
import sqlite3


class limpa():
    def limpa_tela(self):
    
        self.senha_entry.delete(0,END)
        self.nome_entry.delete(0,END)
        self.cpf_entry.delete(0,END)
        self.cidade_entry.delete(0,END)
        self.telefone_entry.delete(0,END)
    def conecta_bd(self):
        self.conn = sqlite3.connect('usuarios.bd')
        self.cursor = self.conn.cursor(); print("conectando ao banco de dados")
    def desconecta_bd(self):
        self.conn.close(); print("desconectado ao banco de dados")
    def montaTabelas(self):
        self.conecta_bd()
        self.cursor.execute("""
            CREATE TABLE IF NOT EXISTS usuarios(

                senha INTEGER PRIMARY KEY,
                nome_usuarios CHAR(40) NOT NULL,                     
                cpf INTERGER(20),
                cidade CHAR(40),
                telefone INTEGAR(20)
            

             );
        """)  #banco de dados chamado usuarios e dentro dessa tabela criei uma tabela chamada usuarios
        self.conn.commit(); print("Banco de dados criados")
        self.desconecta_bd()
    def add_usuarios(self):
        self.senha= self.senha_entry.get()
        self.nome = self.nome_entry.get()
        self.cpf = self.cpf_entry.get()
        self.cidade = self.cidade_entry.get()
        self.telefone = self.telefone_entry.get()
        self.conecta_bd()

        self.cursor.execute("""INSERT INTO usuarios (nome_usuarios,cpf,cidade,telefone)
        VALUES(?,?,?,?)""",(self.nome,self.cpf,self.cidade,self.telefone))
        self.conn.commit()
        self.desconecta_bd()
        self.select_lista() #com isso sempre que adicionar um usuario ele ira atualizar
        self.limpa_tela()


    def select_lista(self):
        self.listacli.delete(*self.listacli.get_children())
        self.conecta_bd()
        lista = self.cursor.execute(""" SELECT senha, nome_usuarios, cpf,cidade, telefone FROM usuarios
            ORDER BY nome_usuarios  ASC; """)
        for i in lista:
            self.listacli.insert("", END, values=i )
        self.desconecta_bd()






class aplicativo(limpa): #precisa está a class limpa dentro da class aplicativo para dizer que ele pode usar as funções da class limpa 
    def __init__(self):
        self.janela1 = janela1
        self.tela()
        self.frames_da_tela()
        self.criando_botões()
        self.lista_frame2()
        self.select_lista()
        self.montaTabelas()
        self.select_lista()
        janela1.mainloop()#fechar
    def tela(self):
        self.janela1.title("banco de dados")
        self.janela1.configure ( background='#00008b')#cor da janela que eu quero
        self.janela1.geometry("400x400")
        self.janela1.resizable(True,True)#caso queira abir mais a janela para as laterais e cima... como coloquei false na segunda ele não deixa eu abaixar a tela
        self.janela1.maxsize(width=900,height=900)# limite maximo que a tela pode chegar
        self.janela1.minsize(width=100,height=100)# limite maximo que a tela pode diminuir
    def frames_da_tela(self):
        self.frame_1 = Frame (self.janela1,bd=4, bg='#a9a9a9',highlightbackground='#5F9F9F',highlightthickness=5)
        self.frame_1.place(relx=0.02,rely=0.02, relwidth=0.96, relheight=0.46)# posição x= orizontal. y= vertical  
        self.frame_2 = Frame (self.janela1,bd=4, bg='#a9a9a9',highlightbackground='#5F9F9F',highlightthickness=5)
        self.frame_2.place(relx=0.02,rely=0.500, relwidth=0.96, relheight=0.46)

    def criando_botões(self):
        self.botão_limpar = Button(self.frame_1, text="Limpar", bd=3,bg='#5F9F9F', fg= '#FFFFFF', font=('verdana',8,'bold'),command= self.limpa_tela) #essa função puxa da class limpa
        self.botão_limpar.place(relx=0.5, rely=0.1,relwidth=0.2,relheight=0.15)

        self.botão_buscar = Button(self.frame_1, text="Buscar",bd=3,bg='#90ee90', fg= '#FFFFFF',font=('verdana',8,'bold'))
        self.botão_buscar.place(relx=0.7, rely=0.1,relwidth=0.2,relheight=0.15)

        self.botão_novo = Button(self.frame_1, text="Novo",bd=3,bg='#FFFFFF', fg= '#000000',font=('verdana',8,'bold'), command= self.add_usuarios)
        self.botão_novo.place(relx=0.4, rely=0.3,relwidth=0.2,relheight=0.15)# talvez coloque na janela2

        self.botão_alterar = Button(self.frame_1, text="Alterar",bd=3,bg= 'yellow', fg= '#000000',font=('verdana',8,'bold'))
        self.botão_alterar.place(relx=0.6, rely=0.3,relwidth=0.2,relheight=0.15)# talvez coloque na janela2

        
        self.botão_apagar = Button(self.frame_1, text="Apagar",bd=3, bg='#ff0000', fg= '#FFFFFF',font=('verdana',8,'bold'))
        self.botão_apagar.place(relx=0.8, rely=0.3,relwidth=0.2,relheight=0.15)# talvez coloque na janela2

        #criação da label e entrada do codigo
        self.lb_senha = Label(self.frame_1,text = "Senha")
        self.lb_senha.place(relx=0.1, rely=0.0,relwidth=0.1,relheight=0.10)

        self.senha_entry = Entry(self.frame_1)
        self.senha_entry.place(relx=0.04, rely=0.12,relwidth=0.3,relheight=0.15)

#caso ele não tenha o cadastro 
        #criação da label e entrada do codigo #nome
        self.lb_nome = Label(self.frame_1,text = "Nome",bd=3, bg='#a9a9a9', fg= '#000000',font=('verdana',8,'bold'))
        self.lb_nome.place(relx=0.0, rely=0.40,relwidth=0.1,relheight=0.10)

        self.nome_entry = Entry(self.frame_1)
        self.nome_entry.place(relx=0.0, rely=0.55,relwidth=0.60)

                #criação da label e entrada do codigo# cpf 
        self.lb_cpf = Label(self.frame_1,text = "CPF",bd=3, bg='#a9a9a9', fg= '#000000',font=('verdana',8,'bold'))
        self.lb_cpf.place(relx=0.0, rely=0.60,relwidth=0.1,relheight=0.10)

        self.cpf_entry = Entry(self.frame_1)
        self.cpf_entry.place(relx=0.0, rely=0.70,relwidth=0.60) 

                #criação da label e entrada do codigo# cidade 
        self.lb_cidade = Label(self.frame_1,text = "Cidade",bd=3, bg='#a9a9a9', fg= '#000000',font=('verdana',8,'bold'))
        self.lb_cidade.place(relx=0.0, rely=0.77,relwidth=0.1,relheight=0.10)

        self.cidade_entry = Entry(self.frame_1)
        self.cidade_entry.place(relx=0.0, rely=0.83,relwidth=0.60)

                #criação da label e entrada do codigo# telefone
        self.lb_telefone = Label(self.frame_1,text = "Telefone",bd=3, bg='#a9a9a9', fg= '#000000',font=('verdana',8,'bold'))
        self.lb_telefone.place(relx=0.0, rely=0.88,relwidth=0.1,relheight=0.10)

        self.telefone_entry = Entry(self.frame_1)
        self.telefone_entry.place(relx=0.0, rely=0.95,relwidth=0.60)



    def lista_frame2(self):
        style = ttk.Style(self.janela1)
        style.theme_use('clam')
        self.listacli = ttk.Treeview(self.frame_2,height=3, column=('col1','col2','col3','col4'))
        self.listacli.heading('#0', text="")
        self.listacli.heading('#1', text="Senha")
        self.listacli.heading('#2', text="Cpf")
        self.listacli.heading('#3', text="Cidade")
        self.listacli.heading('#4', text="Telefone")


        self.listacli.column('#0',width=1)
        self.listacli.column('#1',width=50)
        self.listacli.column('#2',width=200)
        self.listacli.column('#3',width=125)
        self.listacli.column('#4',width=125)
        self.listacli.place(relx=0.01, rely=0.1,relwidth=0.95,relheight=0.85)

        self.scroolLista = Scrollbar(self.frame_2, orient = 'vertical') #codigo para aparecer a seta que fica do lado
        self.listacli.configure(yscroll=self.scroolLista.set)
        self.scroolLista.place(relx=0.96,rely=0.1,relwidth=0.04,relheight=0.85) 


aplicativo()






#poderia colocar na classe aplicativo mais para ficar mais organizada preferir criar outras classes
